##! Implements base functionality for quic analysis.
##! Generates the Quic.log file.

# Generated by binpac_quickstart
# Dop: Oct 2017

module Quic;

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		## Timestamp for when the event happened.
		ts:     time    &log;
		## Unique ID for the connection.
		uid:    string  &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:     conn_id &log;
		version:	string &log;
		
		# ## TODO: Add other fields here that you'd like to log.
	};

	## Event that can be handled to access the quic record as it is sent on
	## to the loggin framework.
	global log_quic: event(rec: Info);
}

# TODO: The recommended method to do dynamic protocol detection
# (DPD) is with the signatures in dpd.sig. If you can't come up
# with any signatures, then you can do port-based detection by
# uncommenting the following and specifying the port(s):

# const ports = { 1234/udp, 5678/udp };


# redef likely_server_ports += { ports };

event bro_init() &priority=5
	{
	Log::create_stream(Quic::LOG, [$columns=Info, $ev=log_quic, $path="quic"]);

	# TODO: If you're using port-based DPD, uncomment this.
	# Analyzer::register_for_ports(Analyzer::ANALYZER_QUIC, ports);
	}

event quic_event(c: connection, version: string, version_bool: bool)
	{
	local info: Info;
	if(version_bool == T){
		info$ts  = network_time();
		info$uid = c$uid;
		info$id  = c$id;
		if(/^Q0/ in version){
			info$version = fmt("GQUIC_%s",version);			
		}else if(/^\xff/ in version){
			# need to subtract 0xff000000 from the version?
			info$version = fmt("IETF-draft-%02d",bytestring_to_count(version)-4278190080);
		}else if(/^\x00/ in version){
			info$version = fmt("IETF-final-%02d",bytestring_to_count(version));
		}else{
			info$version = "unknown";
		}

		Log::write(Quic::LOG, info);
	}
	}